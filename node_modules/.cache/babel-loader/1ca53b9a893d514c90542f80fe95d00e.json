{"ast":null,"code":"import _toConsumableArray from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/kevilinrodrigues/Documentos/myreps/portfolio-dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * 1 second\r\n */\nvar DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nvar StorageError = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(StorageError, _FirebaseError);\n  var _super = _createSuper(StorageError);\n  /**\r\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   * @param status_ - Corresponding HTTP Status Code\r\n   */\n  function StorageError(code, message) {\n    var _this;\n    var status_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    _classCallCheck(this, StorageError);\n    _this = _super.call(this, prependCode(code), \"Firebase Storage: \".concat(message, \" (\").concat(prependCode(code), \")\"));\n    _this.status_ = status_;\n    /**\r\n     * Stores custom error data unique to the `StorageError`.\r\n     */\n    _this.customData = {\n      serverResponse: null\n    };\n    _this._baseMessage = _this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(_assertThisInitialized(_this), StorageError.prototype);\n    return _this;\n  }\n  _createClass(StorageError, [{\n    key: \"status\",\n    get: function get() {\n      return this.status_;\n    },\n    set: function set(status) {\n      this.status_ = status;\n    }\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\n  }, {\n    key: \"_codeEquals\",\n    value: function _codeEquals(code) {\n      return prependCode(code) === this.code;\n    }\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n  }, {\n    key: \"serverResponse\",\n    get: function get() {\n      return this.customData.serverResponse;\n    },\n    set: function set(serverResponse) {\n      this.customData.serverResponse = serverResponse;\n      if (this.customData.serverResponse) {\n        this.message = \"\".concat(this._baseMessage, \"\\n\").concat(this.customData.serverResponse);\n      } else {\n        this.message = this._baseMessage;\n      }\n    }\n  }]);\n  return StorageError;\n}(FirebaseError);\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\nvar StorageErrorCode;\n(function (StorageErrorCode) {\n  // Shared between all platforms\n  StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n  StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n  StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n  StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n  StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n  StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n  StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n  StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n  StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n  StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  StorageErrorCode[\"CANCELED\"] = \"canceled\";\n  // JS specific\n  StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n  StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n  StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n  StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n  StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n  StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n  StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n  StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n  StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n  StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n  StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n  StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n  StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n  return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\nfunction unauthorizedApp() {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\nfunction missingPolyFill(polyFill) {\n  return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"\".concat(polyFill, \" is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.\"));\n}\n/**\r\n * @internal\r\n */\nfunction invalidArgument(message) {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\nfunction appDeleted() {\n  return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\nfunction invalidRootOperation(name) {\n  return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nvar Location = /*#__PURE__*/function () {\n  function Location(bucket, path) {\n    _classCallCheck(this, Location);\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  _createClass(Location, [{\n    key: \"path\",\n    get: function get() {\n      return this.path_;\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.path.length === 0;\n    }\n  }, {\n    key: \"fullServerUrl\",\n    value: function fullServerUrl() {\n      var encode = encodeURIComponent;\n      return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    }\n  }, {\n    key: \"bucketOnlyServerUrl\",\n    value: function bucketOnlyServerUrl() {\n      var encode = encodeURIComponent;\n      return '/b/' + encode(this.bucket) + '/o';\n    }\n  }], [{\n    key: \"makeFromBucketSpec\",\n    value: function makeFromBucketSpec(bucketString, host) {\n      var bucketLocation;\n      try {\n        bucketLocation = Location.makeFromUrl(bucketString, host);\n      } catch (e) {\n        // Not valid URL, use as-is. This lets you put bare bucket names in\n        // config.\n        return new Location(bucketString, '');\n      }\n      if (bucketLocation.path === '') {\n        return bucketLocation;\n      } else {\n        throw invalidDefaultBucket(bucketString);\n      }\n    }\n  }, {\n    key: \"makeFromUrl\",\n    value: function makeFromUrl(url, host) {\n      var location = null;\n      var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n      function gsModify(loc) {\n        if (loc.path.charAt(loc.path.length - 1) === '/') {\n          loc.path_ = loc.path_.slice(0, -1);\n        }\n      }\n      var gsPath = '(/(.*))?$';\n      var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n      var gsIndices = {\n        bucket: 1,\n        path: 3\n      };\n      function httpModify(loc) {\n        loc.path_ = decodeURIComponent(loc.path);\n      }\n      var version = 'v[A-Za-z0-9_]+';\n      var firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n      var firebaseStoragePath = '(/([^?#]*).*)?$';\n      var firebaseStorageRegExp = new RegExp(\"^https?://\".concat(firebaseStorageHost, \"/\").concat(version, \"/b/\").concat(bucketDomain, \"/o\").concat(firebaseStoragePath), 'i');\n      var firebaseStorageIndices = {\n        bucket: 1,\n        path: 3\n      };\n      var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n      var cloudStoragePath = '([^?#]*)';\n      var cloudStorageRegExp = new RegExp(\"^https?://\".concat(cloudStorageHost, \"/\").concat(bucketDomain, \"/\").concat(cloudStoragePath), 'i');\n      var cloudStorageIndices = {\n        bucket: 1,\n        path: 2\n      };\n      var groups = [{\n        regex: gsRegex,\n        indices: gsIndices,\n        postModify: gsModify\n      }, {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      }, {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }];\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        var captures = group.regex.exec(url);\n        if (captures) {\n          var bucketValue = captures[group.indices.bucket];\n          var pathValue = captures[group.indices.path];\n          if (!pathValue) {\n            pathValue = '';\n          }\n          location = new Location(bucketValue, pathValue);\n          group.postModify(location);\n          break;\n        }\n      }\n      if (location == null) {\n        throw invalidUrl(url);\n      }\n      return location;\n    }\n  }]);\n  return Location;\n}();\n/**\r\n * A request whose promise always fails.\r\n */\nvar FailRequest = /*#__PURE__*/function () {\n  function FailRequest(error) {\n    _classCallCheck(this, FailRequest);\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  _createClass(FailRequest, [{\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise_;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _appDelete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    }\n  }]);\n  return FailRequest;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\nfunction start(doRequest,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var retryTimeoutId = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var globalTimeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  var triggeredCallback = false;\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(function () {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n  function responseHandler(success) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call.apply(triggerCallback, [null, success].concat(args));\n      return;\n    }\n    var mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call.apply(triggerCallback, [null, success].concat(args));\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    var waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  var stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\".concat(argument, \"'. Expected \").concat(minValue, \" or greater.\"));\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\".concat(argument, \"'. Expected \").concat(maxValue, \" or less.\"));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart, host, protocol) {\n  var origin = host;\n  if (protocol == null) {\n    origin = \"https://\".concat(host);\n  }\n  return \"\".concat(protocol, \"://\").concat(origin, \"/v0\").concat(urlPart);\n}\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  var isFiveHundredCode = status >= 500 && status < 600;\n  var extraRetryCodes = [\n  // Request Timeout: web server didn't receive full request in time.\n  408,\n  // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  var isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\nvar NetworkRequest = /*#__PURE__*/function () {\n  function NetworkRequest(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    var _this2 = this;\n    var retry = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : true;\n    _classCallCheck(this, NetworkRequest);\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this2.resolve_ = resolve;\n      _this2.reject_ = reject;\n      _this2.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  _createClass(NetworkRequest, [{\n    key: \"start_\",\n    value: function start_() {\n      var _this3 = this;\n      var doTheRequest = function doTheRequest(backoffCallback, canceled) {\n        if (canceled) {\n          backoffCallback(false, new RequestEndStatus(false, null, true));\n          return;\n        }\n        var connection = _this3.connectionFactory_();\n        _this3.pendingConnection_ = connection;\n        var progressListener = function progressListener(progressEvent) {\n          var loaded = progressEvent.loaded;\n          var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n          if (_this3.progressCallback_ !== null) {\n            _this3.progressCallback_(loaded, total);\n          }\n        };\n        if (_this3.progressCallback_ !== null) {\n          connection.addUploadProgressListener(progressListener);\n        }\n        // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        connection.send(_this3.url_, _this3.method_, _this3.body_, _this3.headers_).then(function () {\n          if (_this3.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          _this3.pendingConnection_ = null;\n          var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          var status = connection.getStatus();\n          if (!hitServer || isRetryStatusCode(status, _this3.additionalRetryCodes_) && _this3.retry) {\n            var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n            return;\n          }\n          var successCode = _this3.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n      };\n      /**\r\n       * @param requestWentThrough - True if the request eventually went\r\n       *     through, false if it hit the retry limit or was canceled.\r\n       */\n      var backoffDone = function backoffDone(requestWentThrough, status) {\n        var resolve = _this3.resolve_;\n        var reject = _this3.reject_;\n        var connection = status.connection;\n        if (status.wasSuccessCode) {\n          try {\n            var result = _this3.callback_(connection, connection.getResponse());\n            if (isJustDef(result)) {\n              resolve(result);\n            } else {\n              resolve();\n            }\n          } catch (e) {\n            reject(e);\n          }\n        } else {\n          if (connection !== null) {\n            var err = unknown();\n            err.serverResponse = connection.getErrorText();\n            if (_this3.errorCallback_) {\n              reject(_this3.errorCallback_(connection, err));\n            } else {\n              reject(err);\n            }\n          } else {\n            if (status.canceled) {\n              var _err = _this3.appDelete_ ? appDeleted() : canceled();\n              reject(_err);\n            } else {\n              var _err2 = retryLimitExceeded();\n              reject(_err2);\n            }\n          }\n        }\n      };\n      if (this.canceled_) {\n        backoffDone(false, new RequestEndStatus(false, null, true));\n      } else {\n        this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n      }\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise_;\n    }\n    /** @inheritDoc */\n  }, {\n    key: \"cancel\",\n    value: function cancel(appDelete) {\n      this.canceled_ = true;\n      this.appDelete_ = appDelete || false;\n      if (this.backoffId_ !== null) {\n        stop(this.backoffId_);\n      }\n      if (this.pendingConnection_ !== null) {\n        this.pendingConnection_.abort();\n      }\n    }\n  }]);\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nvar RequestEndStatus = /*#__PURE__*/_createClass(function RequestEndStatus(wasSuccessCode, connection, canceled) {\n  _classCallCheck(this, RequestEndStatus);\n  this.wasSuccessCode = wasSuccessCode;\n  this.connection = connection;\n  this.canceled = !!canceled;\n});\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  var retry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob$1() {\n  var BlobBuilder = getBlobBuilder();\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nvar StringData = /*#__PURE__*/_createClass(function StringData(data, contentType) {\n  _classCallCheck(this, StringData);\n  this.data = data;\n  this.contentType = contentType || null;\n});\n/**\r\n * @internal\r\n */\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  var b = [];\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  var decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          var _invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + _invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if (e.message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  var array = new Uint8Array(bytes.length);\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nvar DataURLParts = /*#__PURE__*/_createClass(function DataURLParts(dataURL) {\n  _classCallCheck(this, DataURLParts);\n  this.base64 = false;\n  this.contentType = null;\n  var matches = dataURL.match(/^data:([^,]+)?,/);\n  if (matches === null) {\n    throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n  }\n  var middle = matches[1] || null;\n  if (middle != null) {\n    this.base64 = endsWith(middle, ';base64');\n    this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n  }\n  this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n});\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nvar FbsBlob = /*#__PURE__*/function () {\n  function FbsBlob(data, elideCopy) {\n    _classCallCheck(this, FbsBlob);\n    var size = 0;\n    var blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  _createClass(FbsBlob, [{\n    key: \"size\",\n    value: function size() {\n      return this.size_;\n    }\n  }, {\n    key: \"type\",\n    value: function type() {\n      return this.type_;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(startByte, endByte) {\n      if (isNativeBlob(this.data_)) {\n        var realBlob = this.data_;\n        var sliced = sliceBlob(realBlob, startByte, endByte);\n        if (sliced === null) {\n          return null;\n        }\n        return new FbsBlob(sliced);\n      } else {\n        var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n        return new FbsBlob(slice, true);\n      }\n    }\n  }, {\n    key: \"uploadData\",\n    value: function uploadData() {\n      return this.data_;\n    }\n  }], [{\n    key: \"getBlob\",\n    value: function getBlob() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      if (isNativeBlobDefined()) {\n        var blobby = args.map(function (val) {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        });\n        return new FbsBlob(getBlob$1.apply(null, blobby));\n      } else {\n        var uint8Arrays = args.map(function (val) {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return val.data_;\n          }\n        });\n        var finalLength = 0;\n        uint8Arrays.forEach(function (array) {\n          finalLength += array.byteLength;\n        });\n        var merged = new Uint8Array(finalLength);\n        var index = 0;\n        uint8Arrays.forEach(function (array) {\n          for (var i = 0; i < array.length; i++) {\n            merged[index++] = array[i];\n          }\n        });\n        return new FbsBlob(merged, true);\n      }\n    }\n  }]);\n  return FbsBlob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  var obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  var index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  var newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nvar Mapping = /*#__PURE__*/_createClass(function Mapping(server, local, writable, xform) {\n  _classCallCheck(this, Mapping);\n  this.server = server;\n  this.local = local || server;\n  this.writable = !!writable;\n  this.xform = xform || noXform_;\n});\nvar mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  var tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart, host, protocol);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    var _iterator = _createForOfIteratorHelper(resource[PREFIXES_KEY]),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var path = _step.value;\n        var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n        var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n        listResult.prefixes.push(reference);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    var _iterator2 = _createForOfIteratorHelper(resource[ITEMS_KEY]),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n        var _reference = service._makeStorageReference(new Location(bucket, item['name']));\n        listResult.items.push(_reference);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\nvar RequestInfo = /*#__PURE__*/_createClass(function RequestInfo(url, method,\n/**\r\n * Returns the value with which to resolve the request's promise. Only called\r\n * if the request is successful. Throw from this function to reject the\r\n * returned Request's promise with the thrown error.\r\n * Note: The XhrIo passed to this function may be reused after this callback\r\n * returns. Do not keep a reference to it in any way.\r\n */\nhandler, timeout) {\n  _classCallCheck(this, RequestInfo);\n  this.url = url;\n  this.method = method;\n  this.handler = handler;\n  this.timeout = timeout;\n  this.urlParams = {};\n  this.headers = {};\n  this.body = null;\n  this.errorHandler = null;\n  /**\r\n   * Called with the current number of bytes uploaded and total size (-1 if not\r\n   * computable) of the request body (i.e. used to report upload progress).\r\n   */\n  this.progressCallback = null;\n  this.successCodes = [200];\n  this.additionalRetryCodes = [];\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, function (_, data) {\n    return data;\n  }, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = \"bytes=0-\".concat(maxDownloadSizeBytes);\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    var str = '';\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nvar ResumableUploadStatus = /*#__PURE__*/_createClass(function ResumableUploadStatus(current, total, finalized, metadata) {\n  _classCallCheck(this, ResumableUploadStatus);\n  this.current = current;\n  this.total = total;\n  this.finalized = !!finalized;\n  this.metadata = metadata || null;\n});\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': \"\".concat(blob.size()),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': \"\".concat(status_.current)\n  };\n  var body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* InternalTaskState.RUNNING */:\n    case \"pausing\" /* InternalTaskState.PAUSING */:\n    case \"canceling\" /* InternalTaskState.CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* InternalTaskState.PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* InternalTaskState.SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* InternalTaskState.CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* InternalTaskState.ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Observer = /*#__PURE__*/_createClass(function Observer(nextOrObserver, error, complete) {\n  _classCallCheck(this, Observer);\n  var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n  if (asFunctions) {\n    this.next = nextOrObserver;\n    this.error = error !== null && error !== void 0 ? error : undefined;\n    this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n  } else {\n    var observer = nextOrObserver;\n    this.next = observer.next;\n    this.error = observer.error;\n    this.complete = observer.complete;\n  }\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return function () {\n    for (var _len5 = arguments.length, argsToForward = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      argsToForward[_key5] = arguments[_key5];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** An override for the text-based Connection. Used in tests. */\nvar textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\nvar XhrConnection = /*#__PURE__*/function () {\n  function XhrConnection() {\n    var _this4 = this;\n    _classCallCheck(this, XhrConnection);\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this4.xhr_.addEventListener('abort', function () {\n        _this4.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      _this4.xhr_.addEventListener('error', function () {\n        _this4.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      _this4.xhr_.addEventListener('load', function () {\n        resolve();\n      });\n    });\n  }\n  _createClass(XhrConnection, [{\n    key: \"send\",\n    value: function send(url, method, body, headers) {\n      if (this.sent_) {\n        throw internalError('cannot .send() more than once');\n      }\n      this.sent_ = true;\n      this.xhr_.open(method, url, true);\n      if (headers !== undefined) {\n        for (var key in headers) {\n          if (headers.hasOwnProperty(key)) {\n            this.xhr_.setRequestHeader(key, headers[key].toString());\n          }\n        }\n      }\n      if (body !== undefined) {\n        this.xhr_.send(body);\n      } else {\n        this.xhr_.send();\n      }\n      return this.sendPromise_;\n    }\n  }, {\n    key: \"getErrorCode\",\n    value: function getErrorCode() {\n      if (!this.sent_) {\n        throw internalError('cannot .getErrorCode() before sending');\n      }\n      return this.errorCode_;\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      if (!this.sent_) {\n        throw internalError('cannot .getStatus() before sending');\n      }\n      try {\n        return this.xhr_.status;\n      } catch (e) {\n        return -1;\n      }\n    }\n  }, {\n    key: \"getResponse\",\n    value: function getResponse() {\n      if (!this.sent_) {\n        throw internalError('cannot .getResponse() before sending');\n      }\n      return this.xhr_.response;\n    }\n  }, {\n    key: \"getErrorText\",\n    value: function getErrorText() {\n      if (!this.sent_) {\n        throw internalError('cannot .getErrorText() before sending');\n      }\n      return this.xhr_.statusText;\n    }\n    /** Aborts the request. */\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.xhr_.abort();\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      return this.xhr_.getResponseHeader(header);\n    }\n  }, {\n    key: \"addUploadProgressListener\",\n    value: function addUploadProgressListener(listener) {\n      if (this.xhr_.upload != null) {\n        this.xhr_.upload.addEventListener('progress', listener);\n      }\n    }\n  }, {\n    key: \"removeUploadProgressListener\",\n    value: function removeUploadProgressListener(listener) {\n      if (this.xhr_.upload != null) {\n        this.xhr_.upload.removeEventListener('progress', listener);\n      }\n    }\n  }]);\n  return XhrConnection;\n}();\nvar XhrTextConnection = /*#__PURE__*/function (_XhrConnection) {\n  _inherits(XhrTextConnection, _XhrConnection);\n  var _super2 = _createSuper(XhrTextConnection);\n  function XhrTextConnection() {\n    _classCallCheck(this, XhrTextConnection);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(XhrTextConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'text';\n    }\n  }]);\n  return XhrTextConnection;\n}(XhrConnection);\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nvar XhrBytesConnection = /*#__PURE__*/function (_XhrConnection2) {\n  _inherits(XhrBytesConnection, _XhrConnection2);\n  var _super3 = _createSuper(XhrBytesConnection);\n  function XhrBytesConnection() {\n    _classCallCheck(this, XhrBytesConnection);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(XhrBytesConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'arraybuffer';\n    }\n  }]);\n  return XhrBytesConnection;\n}(XhrConnection);\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\nvar XhrBlobConnection = /*#__PURE__*/function (_XhrConnection3) {\n  _inherits(XhrBlobConnection, _XhrConnection3);\n  var _super4 = _createSuper(XhrBlobConnection);\n  function XhrBlobConnection() {\n    _classCallCheck(this, XhrBlobConnection);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(XhrBlobConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'blob';\n    }\n  }]);\n  return XhrBlobConnection;\n}(XhrConnection);\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nvar UploadTask = /*#__PURE__*/function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob) {\n    var _this5 = this;\n    var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, UploadTask);\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* InternalTaskState.RUNNING */;\n    this._errorHandler = function (error) {\n      _this5._request = undefined;\n      _this5._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        _this5._needToFetchStatus = true;\n        _this5.completeTransitions_();\n      } else {\n        var backoffExpired = _this5.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            _this5.sleepTime = Math.max(_this5.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            _this5._needToFetchStatus = true;\n            _this5.completeTransitions_();\n            return;\n          }\n        }\n        _this5._error = error;\n        _this5._transition(\"error\" /* InternalTaskState.ERROR */);\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this5._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        _this5.completeTransitions_();\n      } else {\n        _this5._error = error;\n        _this5._transition(\"error\" /* InternalTaskState.ERROR */);\n      }\n    };\n\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise(function (resolve, reject) {\n      _this5._resolve = resolve;\n      _this5._reject = reject;\n      _this5._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, function () {});\n  }\n  _createClass(UploadTask, [{\n    key: \"isExponentialBackoffExpired\",\n    value: function isExponentialBackoffExpired() {\n      return this.sleepTime > this.maxSleepTime;\n    }\n  }, {\n    key: \"_makeProgressCallback\",\n    value: function _makeProgressCallback() {\n      var _this6 = this;\n      var sizeBefore = this._transferred;\n      return function (loaded) {\n        return _this6._updateProgress(sizeBefore + loaded);\n      };\n    }\n  }, {\n    key: \"_shouldDoResumable\",\n    value: function _shouldDoResumable(blob) {\n      return blob.size() > 256 * 1024;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var _this7 = this;\n      if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\n        // This can happen if someone pauses us in a resume callback, for example.\n        return;\n      }\n      if (this._request !== undefined) {\n        return;\n      }\n      if (this._resumable) {\n        if (this._uploadUrl === undefined) {\n          this._createResumable();\n        } else {\n          if (this._needToFetchStatus) {\n            this._fetchStatus();\n          } else {\n            if (this._needToFetchMetadata) {\n              // Happens if we miss the metadata on upload completion.\n              this._fetchMetadata();\n            } else {\n              this.pendingTimeout = setTimeout(function () {\n                _this7.pendingTimeout = undefined;\n                _this7._continueUpload();\n              }, this.sleepTime);\n            }\n          }\n        }\n      } else {\n        this._oneShotUpload();\n      }\n    }\n  }, {\n    key: \"_resolveToken\",\n    value: function _resolveToken(callback) {\n      var _this8 = this;\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          authToken = _ref2[0],\n          appCheckToken = _ref2[1];\n        switch (_this8._state) {\n          case \"running\" /* InternalTaskState.RUNNING */:\n            callback(authToken, appCheckToken);\n            break;\n          case \"canceling\" /* InternalTaskState.CANCELING */:\n            _this8._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n            break;\n          case \"pausing\" /* InternalTaskState.PAUSING */:\n            _this8._transition(\"paused\" /* InternalTaskState.PAUSED */);\n            break;\n        }\n      });\n    }\n    // TODO(andysoto): assert false\n  }, {\n    key: \"_createResumable\",\n    value: function _createResumable() {\n      var _this9 = this;\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = createResumableUpload(_this9._ref.storage, _this9._ref._location, _this9._mappings, _this9._blob, _this9._metadata);\n        var createRequest = _this9._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n        _this9._request = createRequest;\n        createRequest.getPromise().then(function (url) {\n          _this9._request = undefined;\n          _this9._uploadUrl = url;\n          _this9._needToFetchStatus = false;\n          _this9.completeTransitions_();\n        }, _this9._errorHandler);\n      });\n    }\n  }, {\n    key: \"_fetchStatus\",\n    value: function _fetchStatus() {\n      var _this10 = this;\n      // TODO(andysoto): assert(this.uploadUrl_ !== null);\n      var url = this._uploadUrl;\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = getResumableUploadStatus(_this10._ref.storage, _this10._ref._location, url, _this10._blob);\n        var statusRequest = _this10._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n        _this10._request = statusRequest;\n        statusRequest.getPromise().then(function (status) {\n          status = status;\n          _this10._request = undefined;\n          _this10._updateProgress(status.current);\n          _this10._needToFetchStatus = false;\n          if (status.finalized) {\n            _this10._needToFetchMetadata = true;\n          }\n          _this10.completeTransitions_();\n        }, _this10._errorHandler);\n      });\n    }\n  }, {\n    key: \"_continueUpload\",\n    value: function _continueUpload() {\n      var _this11 = this;\n      var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n      var status = new ResumableUploadStatus(this._transferred, this._blob.size());\n      // TODO(andysoto): assert(this.uploadUrl_ !== null);\n      var url = this._uploadUrl;\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo;\n        try {\n          requestInfo = continueResumableUpload(_this11._ref._location, _this11._ref.storage, url, _this11._blob, chunkSize, _this11._mappings, status, _this11._makeProgressCallback());\n        } catch (e) {\n          _this11._error = e;\n          _this11._transition(\"error\" /* InternalTaskState.ERROR */);\n          return;\n        }\n        var uploadRequest = _this11._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, /*retry=*/false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n        );\n\n        _this11._request = uploadRequest;\n        uploadRequest.getPromise().then(function (newStatus) {\n          _this11._increaseMultiplier();\n          _this11._request = undefined;\n          _this11._updateProgress(newStatus.current);\n          if (newStatus.finalized) {\n            _this11._metadata = newStatus.metadata;\n            _this11._transition(\"success\" /* InternalTaskState.SUCCESS */);\n          } else {\n            _this11.completeTransitions_();\n          }\n        }, _this11._errorHandler);\n      });\n    }\n  }, {\n    key: \"_increaseMultiplier\",\n    value: function _increaseMultiplier() {\n      var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n      // Max chunk size is 32M.\n      if (currentSize * 2 < 32 * 1024 * 1024) {\n        this._chunkMultiplier *= 2;\n      }\n    }\n  }, {\n    key: \"_fetchMetadata\",\n    value: function _fetchMetadata() {\n      var _this12 = this;\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = getMetadata$2(_this12._ref.storage, _this12._ref._location, _this12._mappings);\n        var metadataRequest = _this12._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n        _this12._request = metadataRequest;\n        metadataRequest.getPromise().then(function (metadata) {\n          _this12._request = undefined;\n          _this12._metadata = metadata;\n          _this12._transition(\"success\" /* InternalTaskState.SUCCESS */);\n        }, _this12._metadataErrorHandler);\n      });\n    }\n  }, {\n    key: \"_oneShotUpload\",\n    value: function _oneShotUpload() {\n      var _this13 = this;\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = multipartUpload(_this13._ref.storage, _this13._ref._location, _this13._mappings, _this13._blob, _this13._metadata);\n        var multipartRequest = _this13._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n        _this13._request = multipartRequest;\n        multipartRequest.getPromise().then(function (metadata) {\n          _this13._request = undefined;\n          _this13._metadata = metadata;\n          _this13._updateProgress(_this13._blob.size());\n          _this13._transition(\"success\" /* InternalTaskState.SUCCESS */);\n        }, _this13._errorHandler);\n      });\n    }\n  }, {\n    key: \"_updateProgress\",\n    value: function _updateProgress(transferred) {\n      var old = this._transferred;\n      this._transferred = transferred;\n      // A progress update can make the \"transferred\" value smaller (e.g. a\n      // partial upload not completed by server, after which the \"transferred\"\n      // value may reset to the value at the beginning of the request).\n      if (this._transferred !== old) {\n        this._notifyObservers();\n      }\n    }\n  }, {\n    key: \"_transition\",\n    value: function _transition(state) {\n      if (this._state === state) {\n        return;\n      }\n      switch (state) {\n        case \"canceling\" /* InternalTaskState.CANCELING */:\n        case \"pausing\" /* InternalTaskState.PAUSING */:\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING);\n          this._state = state;\n          if (this._request !== undefined) {\n            this._request.cancel();\n          } else if (this.pendingTimeout) {\n            clearTimeout(this.pendingTimeout);\n            this.pendingTimeout = undefined;\n            this.completeTransitions_();\n          }\n          break;\n        case \"running\" /* InternalTaskState.RUNNING */:\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSED ||\n          //        this.state_ === InternalTaskState.PAUSING);\n          var wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\n          this._state = state;\n          if (wasPaused) {\n            this._notifyObservers();\n            this._start();\n          }\n          break;\n        case \"paused\" /* InternalTaskState.PAUSED */:\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSING);\n          this._state = state;\n          this._notifyObservers();\n          break;\n        case \"canceled\" /* InternalTaskState.CANCELED */:\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSED ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._error = canceled();\n          this._state = state;\n          this._notifyObservers();\n          break;\n        case \"error\" /* InternalTaskState.ERROR */:\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._state = state;\n          this._notifyObservers();\n          break;\n        case \"success\" /* InternalTaskState.SUCCESS */:\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._state = state;\n          this._notifyObservers();\n          break;\n      }\n    }\n  }, {\n    key: \"completeTransitions_\",\n    value: function completeTransitions_() {\n      switch (this._state) {\n        case \"pausing\" /* InternalTaskState.PAUSING */:\n          this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n          break;\n        case \"canceling\" /* InternalTaskState.CANCELING */:\n          this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n          break;\n        case \"running\" /* InternalTaskState.RUNNING */:\n          this._start();\n          break;\n      }\n    }\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    }\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this14 = this;\n      // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n      var observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n      this._addObserver(observer);\n      return function () {\n        _this14._removeObserver(observer);\n      };\n    }\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\n  }, {\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      // These casts are needed so that TypeScript can infer the types of the\n      // resulting Promise.\n      return this._promise.then(onFulfilled, onRejected);\n    }\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this.then(null, onRejected);\n    }\n    /**\r\n     * Adds the given observer.\r\n     */\n  }, {\n    key: \"_addObserver\",\n    value: function _addObserver(observer) {\n      this._observers.push(observer);\n      this._notifyObserver(observer);\n    }\n    /**\r\n     * Removes the given observer.\r\n     */\n  }, {\n    key: \"_removeObserver\",\n    value: function _removeObserver(observer) {\n      var i = this._observers.indexOf(observer);\n      if (i !== -1) {\n        this._observers.splice(i, 1);\n      }\n    }\n  }, {\n    key: \"_notifyObservers\",\n    value: function _notifyObservers() {\n      var _this15 = this;\n      this._finishPromise();\n      var observers = this._observers.slice();\n      observers.forEach(function (observer) {\n        _this15._notifyObserver(observer);\n      });\n    }\n  }, {\n    key: \"_finishPromise\",\n    value: function _finishPromise() {\n      if (this._resolve !== undefined) {\n        var triggered = true;\n        switch (taskStateFromInternalTaskState(this._state)) {\n          case TaskState.SUCCESS:\n            async(this._resolve.bind(null, this.snapshot))();\n            break;\n          case TaskState.CANCELED:\n          case TaskState.ERROR:\n            var toCall = this._reject;\n            async(toCall.bind(null, this._error))();\n            break;\n          default:\n            triggered = false;\n            break;\n        }\n        if (triggered) {\n          this._resolve = undefined;\n          this._reject = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"_notifyObserver\",\n    value: function _notifyObserver(observer) {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      switch (externalState) {\n        case TaskState.RUNNING:\n        case TaskState.PAUSED:\n          if (observer.next) {\n            async(observer.next.bind(observer, this.snapshot))();\n          }\n          break;\n        case TaskState.SUCCESS:\n          if (observer.complete) {\n            async(observer.complete.bind(observer))();\n          }\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          if (observer.error) {\n            async(observer.error.bind(observer, this._error))();\n          }\n          break;\n        default:\n          // TODO(andysoto): assert(false);\n          if (observer.error) {\n            async(observer.error.bind(observer, this._error))();\n          }\n      }\n    }\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ || this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n      if (valid) {\n        this._transition(\"running\" /* InternalTaskState.RUNNING */);\n      }\n\n      return valid;\n    }\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\n      if (valid) {\n        this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\n      }\n\n      return valid;\n    }\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var valid = this._state === \"running\" /* InternalTaskState.RUNNING */ || this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n      if (valid) {\n        this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\n      }\n\n      return valid;\n    }\n  }]);\n  return UploadTask;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nvar Reference = /*#__PURE__*/function () {\n  function Reference(_service, location) {\n    _classCallCheck(this, Reference);\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  _createClass(Reference, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'gs://' + this._location.bucket + '/' + this._location.path;\n    }\n  }, {\n    key: \"_newRef\",\n    value: function _newRef(service, location) {\n      return new Reference(service, location);\n    }\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n  }, {\n    key: \"root\",\n    get: function get() {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    }\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._location.bucket;\n    }\n    /**\r\n     * The full path of this object.\r\n     */\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._location.path;\n    }\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return lastComponent(this._location.path);\n    }\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return this._service;\n    }\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var newPath = parent(this._location.path);\n      if (newPath === null) {\n        return null;\n      }\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    }\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._location.path === '') {\n        throw invalidRootOperation(name);\n      }\n    }\n  }]);\n  return Reference;\n}();\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n  var requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(function (bytes) {\n    return maxDownloadSizeBytes !== undefined ?\n    // GCS may not honor the Range header for small files\n    bytes.slice(0, maxDownloadSizeBytes) : bytes;\n  });\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n  var requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(function (blob) {\n    return maxDownloadSizeBytes !== undefined ?\n    // GCS may not honor the Range header for small files\n    blob.slice(0, maxDownloadSizeBytes) : blob;\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n  var requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(function (finalMetadata) {\n    return {\n      metadata: finalMetadata,\n      ref: ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString$1(ref, value) {\n  var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : StringFormat.RAW;\n  var metadata = arguments.length > 3 ? arguments[3] : undefined;\n  ref._throwIfRoot('uploadString');\n  var data = dataFromString(format, value);\n  var metadataClone = Object.assign({}, metadata);\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ref, accumulator, pageToken) {\n    var _accumulator$prefixes, _accumulator$items;\n    var opt, nextPage;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          _context4.next = 3;\n          return list$1(ref, opt);\n        case 3:\n          nextPage = _context4.sent;\n          (_accumulator$prefixes = accumulator.prefixes).push.apply(_accumulator$prefixes, _toConsumableArray(nextPage.prefixes));\n          (_accumulator$items = accumulator.items).push.apply(_accumulator$items, _toConsumableArray(nextPage.items));\n          if (!(nextPage.nextPageToken != null)) {\n            _context4.next = 9;\n            break;\n          }\n          _context4.next = 9;\n          return listAllHelper(ref, accumulator, nextPage.nextPageToken);\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _listAllHelper.apply(this, arguments);\n}\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n    }\n  }\n  var op = options || {};\n  var requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n  var requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n  var requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n  var requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(function (url) {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n  var requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild$1(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    var service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    var reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  storage.host = \"\".concat(host, \":\").concat(port);\n  storage._protocol = 'http';\n  var mockUserToken = options.mockUserToken;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\nvar FirebaseStorageImpl = /*#__PURE__*/function () {\n  function FirebaseStorageImpl(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    _classCallCheck(this, FirebaseStorageImpl);\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n  _createClass(FirebaseStorageImpl, [{\n    key: \"host\",\n    get: function get() {\n      return this._host;\n    },\n    set: function set(host) {\n      this._host = host;\n      if (this._url != null) {\n        this._bucket = Location.makeFromBucketSpec(this._url, host);\n      } else {\n        this._bucket = extractBucket(host, this.app.options);\n      }\n    }\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._maxUploadRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    }\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._maxOperationRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"_getAuthToken\",\n    value: function () {\n      var _getAuthToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var auth, tokenData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._overrideAuthToken) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", this._overrideAuthToken);\n            case 2:\n              auth = this._authProvider.getImmediate({\n                optional: true\n              });\n              if (!auth) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 6;\n              return auth.getToken();\n            case 6:\n              tokenData = _context.sent;\n              if (!(tokenData !== null)) {\n                _context.next = 9;\n                break;\n              }\n              return _context.abrupt(\"return\", tokenData.accessToken);\n            case 9:\n              return _context.abrupt(\"return\", null);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _getAuthToken() {\n        return _getAuthToken2.apply(this, arguments);\n      }\n      return _getAuthToken;\n    }()\n  }, {\n    key: \"_getAppCheckToken\",\n    value: function () {\n      var _getAppCheckToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var appCheck, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              appCheck = this._appCheckProvider.getImmediate({\n                optional: true\n              });\n              if (!appCheck) {\n                _context2.next = 6;\n                break;\n              }\n              _context2.next = 4;\n              return appCheck.getToken();\n            case 4:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", result.token);\n            case 6:\n              return _context2.abrupt(\"return\", null);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _getAppCheckToken() {\n        return _getAppCheckToken2.apply(this, arguments);\n      }\n      return _getAppCheckToken;\n    }()\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\n  }, {\n    key: \"_delete\",\n    value: function _delete() {\n      if (!this._deleted) {\n        this._deleted = true;\n        this._requests.forEach(function (request) {\n          return request.cancel();\n        });\n        this._requests.clear();\n      }\n      return Promise.resolve();\n    }\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\n  }, {\n    key: \"_makeStorageReference\",\n    value: function _makeStorageReference(loc) {\n      return new Reference(this, loc);\n    }\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\n  }, {\n    key: \"_makeRequest\",\n    value: function _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n      var _this16 = this;\n      var retry = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      if (!this._deleted) {\n        var request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n        this._requests.add(request);\n        // Request removes itself from set when complete.\n        request.getPromise().then(function () {\n          return _this16._requests.delete(request);\n        }, function () {\n          return _this16._requests.delete(request);\n        });\n        return request;\n      } else {\n        return new FailRequest(appDeleted());\n      }\n    }\n  }, {\n    key: \"makeRequestWithTokens\",\n    value: function () {\n      var _makeRequestWithTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(requestInfo, requestFactory) {\n        var _yield$Promise$all, _yield$Promise$all2, authToken, appCheckToken;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n            case 2:\n              _yield$Promise$all = _context3.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n              authToken = _yield$Promise$all2[0];\n              appCheckToken = _yield$Promise$all2[1];\n              return _context3.abrupt(\"return\", this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise());\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function makeRequestWithTokens(_x4, _x5) {\n        return _makeRequestWithTokens.apply(this, arguments);\n      }\n      return makeRequestWithTokens;\n    }()\n  }]);\n  return FirebaseStorageImpl;\n}();\nvar name = \"@firebase/storage\";\nvar version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nvar STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\nfunction getStorage() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var bucketUrl = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n  var storageProvider = _getProvider(app, STORAGE_TYPE);\n  var storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  var emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator.apply(void 0, [storageInstance].concat(_toConsumableArray(emulator)));\n  }\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\nfunction connectStorageEmulator(storage, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterStorage();\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["../src/implementation/constants.ts","../src/implementation/error.ts","../src/implementation/location.ts","../src/implementation/failrequest.ts","../src/implementation/backoff.ts","../src/implementation/type.ts","../src/implementation/url.ts","../src/implementation/connection.ts","../src/implementation/utils.ts","../src/implementation/request.ts","../src/implementation/fs.ts","../src/platform/browser/base64.ts","../src/implementation/string.ts","../src/implementation/blob.ts","../src/implementation/json.ts","../src/implementation/path.ts","../src/implementation/metadata.ts","../src/implementation/list.ts","../src/implementation/requestinfo.ts","../src/implementation/requests.ts","../src/implementation/taskenums.ts","../src/implementation/observer.ts","../src/implementation/async.ts","../src/platform/browser/connection.ts","../src/task.ts","../src/reference.ts","../src/service.ts","../src/constants.ts","../src/api.ts","../src/api.browser.ts","../src/index.ts"],"names":["getBlob","getMetadata","list","getBytes","updateMetadata","fbsAsync","uploadBytes","uploadBytesResumable","listAll","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","requestsDeleteObject","_getChild","connectStorageEmulator","uploadBytesInternal","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","connectEmulatorInternal"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module"}